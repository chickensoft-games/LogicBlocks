namespace Chickensoft.Introspection;

using System;
using System.Collections.Generic;

/// <summary>
/// Type graph representing all the registered types in the application, across
/// all assemblies that use this introspection package. Only non-generic
/// reference types that are visible from the global scope of the assembly that
/// registered the types are represented in the graph, including nested types.
/// </summary>
public interface ITypeGraph : ITypeRegistry {
  /// <summary>
  /// Computes and caches secondary type lookup tables based on the types
  /// registered in the provided type registry.
  /// </summary>
  /// <param name="registry">Type registry generated by the introspection
  /// generator.</param>
  void Register(ITypeRegistry registry);

  /// <summary>
  /// Whether or not a type is visible from the global scope. The type graph
  /// only contains information about reference types that are visible from the
  /// global scope of the assembly that registered the types.
  /// </summary>
  /// <param name="type">Type to examine.</param>
  /// <returns>True if the type is visible from the global scope.</returns>
  bool IsVisibleFromGlobalScope(Type type);

  /// <summary>
  /// True if the given reference type is a concrete type visible from the
  /// global scope.
  /// </summary>
  /// <param name="type">Type to examine.</param>
  /// <remarks>
  /// A type is considered concrete if it is a reference type that is not
  /// abstract (and not an interface).
  /// </remarks>
  /// <returns>True if the type is known to be concrete.</returns>
  bool IsConcrete(Type type);

  /// <summary>
  /// Check if a type is an introspective type that has a generated metatype
  /// class associated with it. Use <see cref="GetMetatype(Type)" /> to get the
  /// associated metatype information if this returns true.
  /// </summary>
  /// <param name="type">Type to examine.</param>
  /// <returns>True if the type has generated metatype information.</returns>
  bool IsIntrospectiveType(Type type);

  /// <summary>
  /// Check if an introspective type exists for the given id. The id for an
  /// introspective type is supplied to the introspection generator via the
  /// <see cref="IntrospectiveAttribute" />.
  /// </summary>
  /// <param name="id">Potential introspective type id.</param>
  /// <returns>True if an introspective type exists with this id.</returns>
  bool HasIntrospectiveType(string id);

  /// <summary>
  /// Get the introspective type associated with the given id. To check if an
  /// id is associated with an introspective type, use
  /// <see cref="HasIntrospectiveType(string)" />. To get the metatype of the
  /// introspective type, use <see cref="GetMetatype(Type)" />.
  /// </summary>
  /// <param name="id">Introspective type id.</param>
  /// <returns>The system type of the introspective type.</returns>
  Type GetIntrospectiveType(string id);

  /// <summary>
  /// Gets the metatype associated with the given introspective type. To check
  /// if a type is introspective, use <see cref="IsIntrospectiveType(Type)" />.
  /// </summary>
  /// <param name="type">Introspective type's system type.</param>
  /// <returns>The metatype associated with the introspective type.</returns>
  /// <exception cref="InvalidOperationException" />
  IMetatype GetMetatype(Type type);

  /// <summary>
  /// Gets the immediately known subtypes of the given type. To get all
  /// subtypes, including descendants, use <see cref="GetDescendantSubtypes"/>.
  /// </summary>
  /// <param name="type">Parent type.</param>
  /// <returns>Immediate subtypes.</returns>
  ISet<Type> GetSubtypes(Type type);

  /// <summary>
  /// Gets all known subtypes of the given type, including its immediate
  /// subtypes. To just get the immediate subtypes, use
  /// <see cref="GetSubtypes"/>.
  /// </summary>
  /// <param name="type">Ancestor type.</param>
  ISet<Type> GetDescendantSubtypes(Type type);

  /// <summary>
  /// Gets all the properties of the given metatype, including the properties
  /// inherited from any base metatypes that the type extends.
  /// </summary>
  /// <param name="type">Type whose properties should be looked up.</param>
  /// <returns>All properties of the metatype, including the properties
  /// inherited from any base metatypes that the type extends.</returns>
  IEnumerable<PropertyMetadata> GetProperties(Type type);

  /// <summary>
  /// Gets all the attributes of the given type, including the attributes
  /// inherited from any base metatypes that the type extends.
  /// </summary>
  /// <param name="type">Type whose attributes should be looked up.</param>
  /// <returns>Map of attribute types to the list of attribute instances
  /// that represent the applied attributes on the type.</returns>
  IDictionary<Type, Attribute[]> GetAttributes(Type type);
}
