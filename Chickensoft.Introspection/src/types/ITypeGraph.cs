namespace Chickensoft.Introspection;

using System;
using System.Collections.Generic;
using Chickensoft.Collections;

/// <summary>
/// Type graph representing all the registered types in the application, across
/// all assemblies that use this introspection package. Only non-generic
/// reference types that are visible from the global scope of the assembly that
/// registered the types are represented in the graph, including nested types.
/// </summary>
public interface ITypeGraph {
  /// <summary>
  /// Computes and caches secondary type lookup tables based on the types
  /// registered in the provided type registry.
  /// </summary>
  /// <param name="registry">Type registry generated by the introspection
  /// generator.</param>
  void Register(ITypeRegistry registry);

  /// <summary>
  /// Gets the latest version of an identifiable type, if any. This lookup is
  /// O(1) since it is cached during type registration.
  /// </summary>
  /// <param name="id">Identifiable type id.</param>
  /// <returns>The latest version, or null if the type does not exist.</returns>
  int? GetLatestVersion(string id);

  /// <summary>
  /// Gets the identifiable type associated with the given id, if any.
  /// </summary>
  /// <param name="id">Identifiable type id.</param>
  /// <param name="version">Optional identifiable type version to find. If this
  /// is null, the latest version will be retrieved.</param>
  /// <returns>Identifiable type metadata, if any.</returns>
  Type? GetIdentifiableType(string id, int? version = null);

  /// <summary>
  /// Checks if the given type has metadata associated with it.
  /// </summary>
  /// <param name="type">System type.</param>
  /// <returns>True if the type has metadata associated with it.</returns>
  bool HasMetadata(Type type);

  /// <summary>
  /// Gets metadata associated with the given type, if any.
  /// </summary>
  /// <param name="type">System type.</param>
  /// <returns>Metadata associated with the type, if any.</returns>
  ITypeMetadata? GetMetadata(Type type);

  /// <summary>
  /// Gets the immediately known subtypes of the given type. To get all
  /// subtypes, including descendants, use <see cref="GetDescendantSubtypes"/>.
  /// </summary>
  /// <param name="type">Parent system type.</param>
  /// <returns>Set of system types comprising the type's immediate
  /// subtypes.</returns>
  IReadOnlySet<Type> GetSubtypes(Type type);

  /// <summary>
  /// Gets all known subtypes of the given type, including its immediate
  /// subtypes. To just get the immediate subtypes, use
  /// <see cref="GetSubtypes"/>.
  /// </summary>
  /// <param name="type">Ancestor system type.</param>
  /// <returns>Set of system types comprising all of the type's descendants.
  /// </returns>
  IReadOnlySet<Type> GetDescendantSubtypes(Type type);

  /// <summary>
  /// Gets all the properties of the given introspective type, including
  /// properties inherited from any base introspective types that the type
  /// extends.
  /// </summary>
  /// <param name="type">The system type of an introspective type.</param>
  /// <returns>All properties of the introspective type, including properties
  /// inherited from any base introspective types that the type extends.
  /// </returns>
  IEnumerable<PropertyMetadata> GetProperties(Type type);

  /// <summary>
  /// Gets the first attribute of the specified type that is applied on a
  /// type, if any.
  /// </summary>
  /// <typeparam name="TAttribute">Type of attribute to get.</typeparam>
  /// <param name="type">Type whose attributes should be searched.</param>
  /// <returns>The attribute instance, or null if the attribute was not found.
  /// </returns>
  TAttribute? GetAttribute<TAttribute>(Type type)
  where TAttribute : Attribute;

  /// <summary>
  /// Gets all the attributes of the given introspective type, including the
  /// attributes inherited from any base metatypes that the type extends.
  /// </summary>
  /// <param name="type">The system type of an introspective type.</param>
  /// <returns>Map of attribute types to the list of attribute instances
  /// that represent the applied attributes on the type.</returns>
  IReadOnlyDictionary<Type, Attribute[]> GetAttributes(Type type);

  /// <summary>
  /// Adds a custom identifiable type to the introspection system. Custom types
  /// can represent metadata about types whose introspection is not
  /// automatically generated and registered.
  /// </summary>
  /// <param name="type">System type.</param>
  /// <param name="name">System type name.</param>
  /// <param name="genericTypeGetter">Callback that invokes a type receiver with
  /// the generic type.</param>
  /// <param name="factory">Function which returns a new instance of the object.
  /// </param>
  /// <param name="id">Identifiable type id.</param>
  /// <param name="version">Identifiable type version.</param>
  void AddCustomType(
    Type type,
    string name,
    Action<ITypeReceiver> genericTypeGetter,
    Func<object> factory,
    string id,
    int version = 1
  );
}
